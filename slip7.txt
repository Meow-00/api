using System;

class MatrixOperations
{
    static void Main()
    {
        Console.Write("Enter number of rows (M): ");
        int m = Convert.ToInt32(Console.ReadLine());
        Console.Write("Enter number of columns (N): ");
        int n = Convert.ToInt32(Console.ReadLine());

        int[,] matrix1 = new int[m, n];
        int[,] matrix2 = new int[m, n];
        int[,] sumMatrix = new int[m, n];

        Console.WriteLine("Enter elements of the first matrix:");
        for (int i = 0; i < m; i++)
        {
            for (int j = 0; j < n; j++)
            {
                matrix1[i, j] = Convert.ToInt32(Console.ReadLine());
            }
        }

        Console.WriteLine("Enter elements of the second matrix:");
        for (int i = 0; i < m; i++)
        {
            for (int j = 0; j < n; j++)
            {
                matrix2[i, j] = Convert.ToInt32(Console.ReadLine());
            }
        }

        for (int i = 0; i < m; i++)
        {
            for (int j = 0; j < n; j++)
            {
                sumMatrix[i, j] = matrix1[i, j] + matrix2[i, j];
            }
        }

        Console.WriteLine("Sum of the matrices:");
        for (int i = 0; i < m; i++)
        {
            for (int j = 0; j < n; j++)
            {
                Console.Write(sumMatrix[i, j] + " ");
            }
            Console.WriteLine();
        }

        Console.WriteLine("Transpose of the first matrix:");
        for (int j = 0; j < n; j++)
        {
            for (int i = 0; i < m; i++)
            {
                Console.Write(matrix1[i, j] + " ");
            }
            Console.WriteLine();
        }
    }
}



using System;
using System.Collections.Generic;

class StackImplementation
{
    static void Main()
    {
        Stack<int> stack = new Stack<int>();
        string command;
        
        do
        {
            Console.WriteLine("Enter 'push' to add an element, 'pop' to remove an element, 'top' to see the top element, 'empty' to check if the stack is empty, or 'exit' to quit:");
            command = Console.ReadLine();

            if (command == "push")
            {
                Console.Write("Enter a number to push: ");
                int value = Convert.ToInt32(Console.ReadLine());
                stack.Push(value);
            }
            else if (command == "pop")
            {
                if (stack.Count > 0)
                {
                    int poppedValue = stack.Pop();
                    Console.WriteLine($"Popped value: {poppedValue}");
                }
                else
                {
                    Console.WriteLine("Stack is empty.");
                }
            }
            else if (command == "top")
            {
                if (stack.Count > 0)
                {
                    Console.WriteLine($"Top element: {stack.Peek()}");
                }
                else
                {
                    Console.WriteLine("Stack is empty.");
                }
            }
            else if (command == "empty")
            {
                Console.WriteLine(stack.Count == 0 ? "Stack is empty." : "Stack is not empty.");
            }
        } while (command != "exit");
    }
}
